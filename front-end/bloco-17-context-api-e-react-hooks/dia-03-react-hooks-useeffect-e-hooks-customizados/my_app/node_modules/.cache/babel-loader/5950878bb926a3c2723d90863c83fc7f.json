{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nfunction useTimer() {\n  _s();\n\n  const [number, setNumber] = useState(1);\n  const [isMultiple, setMultiple] = useState(false);\n  const [timer, setTimer] = useState(1);\n  const TIMER_INTERVAL = 1000;\n  const NUMBER_TIMEOUT = 10000;\n  const MESSAGE_TIMEOUT = 4000;\n  const MIN_RANDOM = 1;\n  const MAX_RANDOM = 100;\n\n  const increaseTimerInterval = () => setTimer(timer => timer + 1);\n\n  const verifyMultiple = randomNUmber => {\n    if (randomNUmber % 3 === 0 || randomNUmber % 5 === 0) {\n      setMultiple(true);\n      setTimeout(() => setMultiple(false), me);\n    }\n  };\n}\n\n_s(useTimer, \"T3EYG3N+nqPX9bbwrBpEAOiqt3A=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/home/alexcssilva/Documentos/trybe-exercicios/front-end/bloco-17-context-api-e-react-hooks/dia-03-react-hooks-useeffect-e-hooks-customizados/my_app/src/hooks/useTimer.js"],"names":["useState","useEffect","useTimer","number","setNumber","isMultiple","setMultiple","timer","setTimer","TIMER_INTERVAL","NUMBER_TIMEOUT","MESSAGE_TIMEOUT","MIN_RANDOM","MAX_RANDOM","increaseTimerInterval","verifyMultiple","randomNUmber","setTimeout","me"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACK,UAAD,EAAaC,WAAb,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AAEA,QAAMS,cAAc,GAAG,IAAvB;AACA,QAAMC,cAAc,GAAG,KAAvB;AACA,QAAMC,eAAe,GAAG,IAAxB;AACA,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,UAAU,GAAG,GAAnB;;AAEA,QAAMC,qBAAqB,GAAG,MAAMN,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAA5C;;AAEA,QAAMQ,cAAc,GAAGC,YAAY,IAAI;AACrC,QAAIA,YAAY,GAAG,CAAf,KAAqB,CAArB,IAA0BA,YAAY,GAAG,CAAf,KAAqB,CAAnD,EAAsD;AACpDV,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAW,MAAAA,UAAU,CAAC,MAAMX,WAAW,CAAC,KAAD,CAAlB,EAA2BY,EAA3B,CAAV;AACD;AACF,GALD;AAMD;;GAnBQhB,Q;;AAoBT,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useTimer() {\n  const [number, setNumber] = useState(1);\n  const [isMultiple, setMultiple] = useState(false);\n  const [timer, setTimer] = useState(1);\n\n  const TIMER_INTERVAL = 1000;\n  const NUMBER_TIMEOUT = 10000;\n  const MESSAGE_TIMEOUT = 4000;\n  const MIN_RANDOM = 1;\n  const MAX_RANDOM = 100;\n\n  const increaseTimerInterval = () => setTimer(timer => timer + 1);\n\n  const verifyMultiple = randomNUmber => {\n    if (randomNUmber % 3 === 0 || randomNUmber % 5 === 0) {\n      setMultiple(true);\n      setTimeout(() => setMultiple(false), me)\n    }\n  }\n}\nexport default useTimer;"]},"metadata":{},"sourceType":"module"}